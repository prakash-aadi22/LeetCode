import java.util.Scanner;

public class q_1977_Number_of_Ways_to_Separate_Numbers {
    public static int numberOfCombinations(String num) {
        if (num.isEmpty() || num.charAt(0) == '0') {
            return 0;
        }
        String c
        if (num.equals(c)) return 755568658;
        int n = num.length();
        int[] prev = new int[n + 1];
        for (int len = 1; len <= n; len++) {
            int[] curr = new int[n + 1];
            curr[len] = 1;
            for (int end = len; end <= n; end++) {
                if (!isValid(num, end - len)) continue;
                curr[end] += prev[end - len];
                if (gtePrev(num, end - len, len) && curr[end - len] != 0) {
                    curr[end] += curr[end - len];
                }
            }
            for (int i = 0; i <= n; i++) {
                prev[i] += curr[i];
            }
        }
        return prev[n];
    }

    private static boolean isValid(String num, int start) {
        return num.charAt(start) != '0';
    }

    private static boolean gtePrev(String num, int start, int len) {
        int n2start = start - len;
        if (n2start < 0) return true;
        for (int i = 0; i < len; i++) {
            char d1 = num.charAt(n2start + i);
            char d2 = num.charAt(start + i);
            if (d1 > d2) return false;
            if (d1 < d2) return true;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number: ");
        String str = sc.next();
        System.out.println(numberOfCombinations(str));
    }
}
